#!/bin/bash

# Create Singularity cache directory in /tmp and set environment variables
mkdir -p /tmp/$USER/singularity/cache
export SINGULARITY_CACHEDIR=/tmp/$USER/singularity/cache
export SINGULARITY_TMPDIR=/tmp/$USER/singularity/cache

# Define core parameters - rawdata, pipedir, moduledir, assembly_name
# sourcedir="/path/to/rawreads/"
pipedir=$(pwd -P)
moduledir="${pipedir}/modules"
 
#current_date=$(date +%d%m%y)  
#assembly="assembly" 

## Make workdir and output directories
workdir="${pipedir}/workdir"
outdir="${pipedir}/outdir"
log="${workdir}/log"
singularitydir="${pipedir}/singularities"

if [[ ! -d ${workdir} ]]; then 
	mkdir -p ${workdir}
fi

if [[ ! -d "${outdir}" ]]; then 
	mkdir -p "${outdir}" 
fi

if [[ ! -d "${log}" ]]; then
        mkdir -p "${log}"
fi

if [[ ! -d "${singularitydir}" ]]; then
        mkdir -p "${singularitydir}"
fi

# Export core parameters
export sourcedir
export pipedir
export workdir
export outdir
export moduledir
export log
export sample_number
export assembly
export singularitydir

# Step 0: Data Transfer
rawdir="${pipedir}/raw_data"
if [[ ! -d "${rawdir}" ]]; then 
	mkdir -p "${rawdir}" 
fi
export rawdir

# count number of samples, reads
#sample_number=$(ls -l ${rawdir}/*_1.fastq.gz | wc -l)

# STEP 1A:
qcdir="${workdir}/qc_results_array" 
if [[ ! -d "${qcdir}" ]]; then 
	mkdir -p "${qcdir}" 
fi 
export qcdir

# STEP 2A:
trimdir="${workdir}/trim_files" 
if [[ ! -d "${trimdir}" ]]; then 
	mkdir -p "${trimdir}" 
fi
export trimdir

#-------------testing-------

# Count all files in rawdir
sample_number=$(find "${rawdir}" -maxdepth 1 -type f | wc -l)

if (( sample_number == 0 )); then
  echo "ERROR: No input files found in ${rawdir}" >&2
  exit 1
fi

# Compute max index for SLURM_ARRAY_TASK_ID (zero-based)
max_idx=$(( sample_number - 1 ))
export sample_number max_idx

#---------------------------

# STEP 1B:
# define in step 1

# STEP 2B:
krakendir="${workdir}/kraken"
if [[ ! -d "${krakendir}" ]]; then
        mkdir -p "${krakendir}"
fi
export krakendir

# STEP 2C:
rcordir="${workdir}/rcorrector" 
if [[ ! -d "${rcordir}" ]]; then
        mkdir -p "${rcordir}"
fi
export rcordir

#STEP 3: Assembly
assemblydir="${workdir}/assembly/trinity_assemby"
if [[ ! -d "${assemblydir}" ]]; then
        mkdir -p "${assemblydir}"
fi
export assemblydir

#STEP 4: Evigene
evigenedir="${workdir}/evigene"
if [[ ! -d "${evigenedir}" ]]; then
        mkdir -p "${evigenedir}"
fi
export evigenedir

#STEP 5: Busco
buscodir="${workdir}/busco"
if [[ ! -d "${buscodir}" ]]; then
        mkdir -p "${buscodir}"
fi
export buscodir

#STEP 6: trinity mapping
rsemdir="${workdir}/rsem"
if [[ ! -d "${rsemdir}" ]]; then
        mkdir -p "${rsemdir}"
fi
export rsemdir

#STEP 6: trinity post analsyis
#conditionA	sample1
#conditionB	sample2
metadata=${pipedir}/metadata.txt
export metadata

#STEP 8: multiqc
multiqcdir="${workdir}/multiqc"
if [[ ! -d "${multiqcdir}" ]]; then
        mkdir -p "${multiqcdir}"
fi
export multiqcdir

#Step 9: Blastdb download and formatting
blastdb="${pipedir}/blastdb"
if [[ ! -d "${blastdb}" ]]; then
        mkdir -p "${blastdb}"
fi
export blastdb

#Step 10: Blastp Evigene Translation
blastout="${workdir}/blastdir"
if [[ ! -d "${blastout}" ]]; then
        mkdir -p "${blastout}"
fi
export blastout

#Step 11: Import annotation from Uniprot - unimapi
upimapi="${workdir}/upimapi"
if [[ ! -d "${upimapi}" ]]; then
        mkdir -p "${upimapi}"
fi
export upimapi

#Step 12: Prepare upimapi results and compile them innto a database
mergedir="${workdir}/mergedir"
if [[ ! -d "${mergedir}" ]]; then
        mkdir -p "${mergedir}"
fi
export mergedir

